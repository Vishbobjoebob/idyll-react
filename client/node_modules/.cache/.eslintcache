[{"/Users/jensenzhang/Desktop/idyll-react/client/src/index.js":"1","/Users/jensenzhang/Desktop/idyll-react/client/src/App.js":"2","/Users/jensenzhang/Desktop/idyll-react/client/src/config/firebase-config.js":"3","/Users/jensenzhang/Desktop/idyll-react/client/src/components/NavDashboard.js":"4","/Users/jensenzhang/Desktop/idyll-react/client/src/components/Search.js":"5","/Users/jensenzhang/Desktop/idyll-react/client/src/components/Sell.js":"6","/Users/jensenzhang/Desktop/idyll-react/client/src/contexts/AuthContext.js":"7","/Users/jensenzhang/Desktop/idyll-react/client/src/components/Browse.js":"8"},{"size":296,"mtime":1637808258949,"results":"9","hashOfConfig":"10"},{"size":3501,"mtime":1638751924698,"results":"11","hashOfConfig":"10"},{"size":557,"mtime":1637681709702,"results":"12","hashOfConfig":"10"},{"size":15598,"mtime":1638751924699,"results":"13","hashOfConfig":"10"},{"size":292,"mtime":1637800449684,"results":"14","hashOfConfig":"10"},{"size":11075,"mtime":1638755532518,"results":"15","hashOfConfig":"10"},{"size":4276,"mtime":1638755313279,"results":"16","hashOfConfig":"10"},{"size":5334,"mtime":1638331686084,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"q322f6",{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"20"},"/Users/jensenzhang/Desktop/idyll-react/client/src/index.js",[],["40","41"],"/Users/jensenzhang/Desktop/idyll-react/client/src/App.js",["42","43","44","45","46"],"import React, { useEffect, useState} from \"react\"\nimport axios from 'axios'\nimport './App.css';\nimport firebase from 'firebase/compat/app'\nimport 'firebase/compat/auth'\nimport Sell from './components/Sell'\nimport Search from './components/Search'\nimport Browse from './components/Browse'\nimport NavDashboard from './components/NavDashboard';\nimport { AuthProvider } from './contexts/AuthContext';\nimport {BrowserRouter as Router, Routes, Route} from 'react-router-dom'\n\nfunction App() {  \n    // const [auth, setAuth] = useState(false || window.localStorage.getItem(\"auth\")===true);\n    // const [token, setToken] = useState('')\n    // const [user, setUser] = useState(firebase.auth().currentUser)\n\n    // useEffect(()=> {\n    //     firebase.auth().onAuthStateChanged((userCred) => {\n    //     if (userCred) {\n    //         setAuth(true)\n    //         window.localStorage.setItem('auth', 'true')\n    //         userCred.getIdToken().then((token) => {\n    //         setToken(token)\n    //         })\n    //         setUser(firebase.auth().currentUser);\n    //         console.log(user)\n    //     }\n    //     })\n    // })\n    // const loginWithGoogle = async() => {\n    //     await firebase\n    //     .auth()\n    //     .signInWithPopup(new firebase.auth.GoogleAuthProvider())\n    //     .then((userCred)=> {\n    //     if (userCred) {\n    //         setAuth(true);\n    //         window.localStorage.setItem('auth', 'true')\n    //         setUser(firebase.auth().currentUser);\n    //         console.log(user)\n    //     }\n    //     console.log(userCred) \n    //     })\n    // }\n\n    // const loginWithEmail = async(email, password) => {\n    //     await firebase\n    //     .auth()\n    //     .signInWithEmailAndPassword(email, password)\n    //     .then((userCred)=> {\n    //     if (userCred) {\n    //         console.log(userCred)\n    //         setAuth(true);\n    //         window.localStorage.setItem('auth', 'true')\n    //         setUser(firebase.auth().currentUser);\n    //         console.log(user)\n    //     }\n    //     console.log(userCred) \n    //     })\n    // }\n\n    // const signUpWithEmail = async(email, password, username, firstName, lastName, phoneNumber) => {\n    //     await firebase\n    //     .auth()\n    //     .createUserWithEmailAndPassword(email, password)\n    //     .then((userCred)=> {\n    //        if (userCred) {\n    //         userCred.user.displayName = firstName + \" \" + lastName;\n    //         userCred.user.phoneNumber = phoneNumber;\n    //         loginWithEmail(email, password);\n    //         setAuth(true);\n    //         window.localStorage.setItem('auth', 'true')\n    //         setUser(firebase.auth().currentUser);\n    //         console.log(user)\n    //     } \n    //     })\n    // }\n\n    // useEffect(() => {\n    //     if (token) {\n    //         fetchData(token);\n    //     }\n    // },[token])\n\n    // const fetchData = async (token) =>{\n    //     const res = await axios.get(\"http://localhost:5000/api/todos\", {\n    //         headers : {\n    //             Authorization: 'Bearer ' + token,\n    //         }\n    //     })\n    //     console.log(res.data)\n    // }\n  return (\n    <Router>\n      <AuthProvider>\n          <Routes>\n            <Route path=\"/\" element ={<><NavDashboard/><Browse/></>}/>\n            <Route path=\"/sell\" element ={<><NavDashboard/><Sell/></>}/>\n            {/* <Route path=\"/signup\" element={<><Nav/><Signup/></>}/> */}\n          </Routes>\n      </AuthProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","/Users/jensenzhang/Desktop/idyll-react/client/src/config/firebase-config.js",[],"/Users/jensenzhang/Desktop/idyll-react/client/src/components/NavDashboard.js",["47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73"],"import React, { useEffect, useState, useRef} from \"react\"\nimport { useNavigate } from \"react-router-dom\"\nimport 'firebase/compat/auth'\nimport '../css/nav.css'\n//import '../css/signup.css'\nimport logo from '../images/fullLogo.png'\nimport google_logo from '../images/google_logo.png'\nimport apple_logo from '../images/apple_logo.png'\nimport {Modal, Button, Alert, NavDropdown} from 'react-bootstrap'\nimport { useAuth } from \"../contexts/AuthContext\"\nimport {PersonFill, ChevronCompactLeft, PersonCircle, CartFill} from \"react-bootstrap-icons\"\n\nexport default function NavDashboard(props) {\n    const [show, setShow] = useState(false);\n    const [showSignup, setShowSignup] = useState(false)\n    const [showSignupChoose, setShowSignupChoose] = useState(false)\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n    const handleCloseSignup = () => setShowSignup(false);\n    const handleShowSignup = () => setShowSignup(true);\n    const handleCloseSignupChoose = () => setShowSignupChoose(false)\n    const handleShowSignupChoose = () => setShowSignupChoose(true)\n\n    const emailRefLogin = useRef();\n    const passwordRefLogin = useRef();\n    const rememberMeRefLogin = useRef();\n    const emailRef = useRef();\n    const emailConfirmRef = useRef();\n    const passwordRef = useRef();\n    const passwordConfirmRef = useRef();\n    const firstNameRef = useRef();\n    const lastNameRef = useRef();\n    const usernameRef = useRef();\n    const phoneNumberRef = useRef();\n\n    const navigate = useNavigate();\n\n    const {currentUser, signup, login, signout, userData} = useAuth();\n    const [errorLogin, setErrorLogin] = useState(undefined);\n    const [error, setError] = useState(undefined);\n\n    async function submitLoginInformation(e) {\n        e.preventDefault();\n\n        setErrorLogin(\"\")\n        let loginRes = await login(emailRefLogin.current.value, passwordRefLogin.current.value)\n        if(loginRes) { \n            setErrorLogin('Invalid email or password')\n        } else {\n            setShow(false);\n            navigate(\"/\");\n        }\n    }\n\n    async function submitInformation(e) {\n        e.preventDefault();\n\n        if (passwordRef.current.value !== passwordConfirmRef.current.value) {\n            setError(\"It looks like your passwords don't match. Please check again.\")\n            return;\n        }\n\n        if (emailRef.current.value !== emailConfirmRef.current.value) {\n            setError(\"It looks like your emails don't match. Please check again.\")\n            return;\n        }\n\n        setError(\"\")\n        let res = await signup(emailRef.current.value, passwordRef.current.value, usernameRef.current.value, firstNameRef.current.value, lastNameRef.current.value, phoneNumberRef.current.value)\n        if (res) {\n            switch (res.code) {\n                case \"auth/email-already-in-use\":\n                    setError(\"It looks like you already have an account with this email. Please login.\")\n                    break;\n                case \"auth/invalid-email\": \n                    setError(\"Please use a valid email.\")\n                    break;\n                case \"auth/weak-password\":\n                    setError(\"Your password is too weak. Please try again.\")\n                    break;\n                default:\n                    setError(\"We failed to create an account for you. Please try again.\")\n            }\n        }\n        handleCloseSignup();\n        navigate(\"/\");\n\n    };\n\n    async function switchToSignupChoose(e) {\n        e.preventDefault();\n        handleClose();\n        handleShowSignupChoose();\n    }\n\n    async function switchToLogin(e) {\n        e.preventDefault();\n        handleCloseSignupChoose();\n        handleShow();\n    }\n\n    async function switchToSignup(e) {\n        e.preventDefault();\n        handleCloseSignupChoose();\n        handleShowSignup();\n    }\n\n    async function switchToSignupChooseFromEmail(e) {\n        e.preventDefault();\n        handleCloseSignup();\n        handleShowSignupChoose();\n    }\n\n    return (\n        <>\n            <nav id=\"navbar\" className=\"\">\n                {/* Navbar Logo */}\n                <div className=\"logo\">\n                    {/* Logo Placeholder for Inlustration */}\n                    <a id=\"company-logo\" href=\"/home\"><img id=\"logo\" src={logo} width='124px'/></a>\n                </div>\n\n                <ul id=\"nav-links\">\n                    <li><a href=\"\">Map</a></li>\n                    <li><a href=\"/\">Browse</a></li>\n                    <li><a href=\"/sell\">Sell</a></li>\n                </ul>\n\n                {/* <div> Welcome {currentUser.email} </div> */}\n\n                {/* Navbar Links */}\n                    {/* {props.auth && props.user!==null ? (\n                        <ul id=\"menu\">\n                        </ul>\n                    ) : (\n                        <ul id=\"menu\">\n                        <li><a href=\"/home\">Home</a></li>\n                        <li><a href=\"/browse\">Browse</a></li>\n                        <li><a href=\"#contact\">Contact Us</a></li>\n                        <li><a href=\"/login\">Log in</a></li>\n                        <li><a href=\"/signup\">Sign up</a></li>\n                        <button onClick={props.login}> Login With Google </button>\n                        </ul>\n                    )} */} \n                    {currentUser && userData ? (\n                        <div class=\"navbar-icons\">\n                            <NavDropdown title={<PersonCircle size={32} color = \"black\"/>} className=\"navbar-icon\">\n                                Welcome {userData.firstName}\n                                <NavDropdown.Item href=\"/\" onClick={signout}>Log Out</NavDropdown.Item>\n                            </NavDropdown>\n                            <NavDropdown title={<CartFill size={32} color = \"black\"/>} className=\"navbar-icon\" color=\"black\"></NavDropdown>\n                        </div>\n                    ) : (\n                        <div class=\"navbar-icons\">\n                            <NavDropdown title={<div class=\"black-thin-navbar-text\"> Welcome Sign In</div>} className=\"navbar-icon\">\n                                <NavDropdown.Item onClick={handleShow}><button type=\"button\" class=\"green-btn\" id=\"login-btn\" onClick={handleShow}> Log In </button></NavDropdown.Item>\n                            </NavDropdown>\n                            <NavDropdown title={<CartFill size={32} color = \"black\"/>} className=\"navbar-icon\" color=\"black\"></NavDropdown>\n                        </div>\n                    )}\n                    {/* <button type=\"button\" class=\"green-btn\" id=\"login-btn\" onClick={handleShow}> Log In </button> */}\n\n                    <Modal id=\"login-modal\" show={show} onHide={handleClose} aria-labelledby=\"contained-modal-title-vcenter\" backdrop=\"static\" centered>\n                        <Modal.Header closeButton>\n                            <Modal.Title>Log In To Idyll</Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            <form id=\"item-information\" className=\"form-horizontal\" onSubmit={submitLoginInformation}>\n                            {errorLogin && <Alert variant = 'danger'>{errorLogin}</Alert>}\n                                <label className=\"control-label\" style={{margin:\"0px\"}} htmlFor=\"dish-name\" className=\"label-name\" id=\"email-label\"> Email </label>\n                                <input ref = {emailRefLogin} className=\"form-control green-border\" type=\"text\" id=\"email\" name=\"email\" autoComplete=\"off\" placeholder=\"Email\" id=\"email-box\" required/><br></br>\n\n                                <label htmlFor=\"dish-price\" id=\"password-label\"> Password </label>\n                                <input ref = {passwordRefLogin} className=\"form-control green-border\" type=\"password\" id=\"password\" name=\"password\" autoComplete=\"off\" placeholder=\"Password\" id=\"password-box\" required/><br></br>\n\n                                <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"remember-me\"/>\n                                <label ref = {rememberMeRefLogin} className=\"form-check-label\" for=\"remember-me\" id=\"remember-me-label\"> Remember Me </label>\n\n                                <a href=\"#\" class=\"\" id=\"forgot-password\">Forgot password?</a>\n\n                                <input id=\"submit-btn\" className=\"btn btn-primary mb-3\" type=\"submit\" value=\"Login\"/>\n                            </form>\n\n                            <div class=\"separator\">\n                                <div id = \"left-line\" class=\"line-bruh\"></div>\n                                <div id = \"or\"> OR </div>\n                                <div id = \"left-line\" class=\"line-bruh\"></div>\n                            </div>\n                            <div class=\"alternative-auth\">\n                                <a id=\"google\" href=\"\"><img id=\"logo\" src={google_logo} width='54px'/></a>\n                                <a id=\"apple\" href=\"\"><img id=\"logo\" src={apple_logo} width='122px'/></a>\n                            </div>\n                            <div id=\"registration\"> \n                                <div id=\"registration-question\">Not registered?</div>\n                                <a id=\"registration-signup\" href=\"\" onClick={switchToSignupChoose}> Sign Up for free! </a>\n                            </div>\n                        </Modal.Body>\n                    </Modal>\n\n                    <Modal id=\"signup-modal\" show={showSignup} onHide={handleCloseSignup} aria-labelledby=\"contained-modal-title-vcenter\" backdrop=\"static\" centered>\n                        <Modal.Header closeButton>\n                            <ChevronCompactLeft onClick={switchToSignupChooseFromEmail} id=\"back-btn\" color=\"black\" size={32}></ChevronCompactLeft>\n                            <Modal.Title id=\"email-title\">Sign Up With Email</Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            <form id=\"item-information\" className=\"form-horizontal\" onSubmit={(e) => {submitInformation(e)}}>\n                                {error && <Alert variant = 'danger'>{error}</Alert>}\n                                <div className=\"error\"></div>\n                                <label htmlFor=\"firstName\" className=\"control-label\" className=\"label-name\"> First Name </label>\n                                <input ref = {firstNameRef} className=\"form-control\" type=\"text\" id=\"firstName\" name=\"firstName\" placeholder=\"John\" autoComplete=\"off\" required/><br></br>\n\n                                <label htmlFor=\"lastName\" className=\"control-label\" className=\"label-name\"> Last Name </label>\n                                <input ref = {lastNameRef} className=\"form-control\" type=\"text\" id=\"lastName\" name=\"lastName\" placeholder=\"Doe\" autoComplete=\"off\" required/><br></br>\n\n                                <label htmlFor=\"email\" className=\"control-label\" className=\"label-name\"> Email </label>\n                                <input ref = {emailRef} className=\"form-control\" type=\"text\" id=\"email\" name=\"email\" placeholder=\"idyll@idyll.shop\" autoComplete=\"off\" required/><br></br>\n                                \n                                <label htmlFor=\"email-confirmation\" className=\"control-label\" className=\"label-name\"> Email Confirmation </label>\n                                <input ref = {emailConfirmRef} className=\"form-control\" type=\"text\" id=\"email-confirmation\" name=\"emailConfirmation\" placeholder=\"idyll@idyll.shop\" autoComplete=\"off\" required/><br></br>\n\n                                <label htmlFor=\"username\" className=\"control-label\" className=\"label-name\"> Username </label>\n                                <input ref = {usernameRef} className=\"form-control\" type=\"text\" id=\"username\" name=\"username\" placeholder=\"Idyll\" autoComplete=\"off\" required/><br></br>\n\n                                <label htmlFor=\"password\" className=\"control-label\" className=\"label-name\"> Password </label>\n                                <input ref = {passwordRef} className=\"form-control\" type=\"password\" id=\"password\" name=\"password\" placeholder=\"At least 6 letters and numbers\" autoComplete=\"off\" required/><br></br>\n\n                                <label htmlFor=\"password-confirmation\" className=\"control-label\" className=\"label-name\"> Password Confirmation </label>\n                                <input ref = {passwordConfirmRef} className=\"form-control\" type=\"password\" id=\"password-confirmation\" name=\"passwordConfirmation\" placeholder=\"At least 6 letters and numbers\" autoComplete=\"off\" required/><br></br>\n\n                                <label htmlFor=\"phoneNumber\" className=\"control-label\" className=\"label-name\"> Phone Number </label>\n                                <input ref = {phoneNumberRef} className=\"form-control\" type=\"text\" id=\"phoneNumber\" name=\"phoneNumber\" placeholder=\"xxxxxxxxxx\" autoComplete=\"off\" required/><br></br>\n\n                                <input id=\"submit-btn\" className=\"btn btn-primary mb-3\" type=\"submit\" value=\"Sign Up\"/>\n                            </form>\n                        </Modal.Body>\n                    </Modal>\n\n                    <Modal id=\"signup-choose-modal\" show={showSignupChoose} onHide={handleCloseSignupChoose} aria-labelledby=\"contained-modal-title-vcenter\" backdrop=\"static\" centered>\n                        <Modal.Header closeButton>\n                            <Modal.Title>Sign Up for Idyll</Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            <div class=\"signup-options\">\n                                <div class=\"option\" id=\"email-and-password-option\" onClick={switchToSignup}>\n                                    <div class=\"subpicture\" id=\"email-pic\"><PersonFill class=\"center-pic\" color=\"black\" size = {37}></PersonFill></div>\n                                    <div class=\"option-text\">Use email/password</div>\n                                </div>\n                                <div class=\"option\" id=\"google-option\" >\n                                    <div class=\"subpicture\" id=\"google-pic\"> <img class=\"center-pic\" src={google_logo} width='36px'></img></div>\n                                    <div class=\"option-text\">Continue With Google</div>\n                                </div>\n                                <div class=\"option\" id=\"apple-option\" >\n                                    <div class=\"subpicture\" id=\"apple-pic\"> <img class=\"center-pic\" src={apple_logo} width='73px'></img></div>\n                                    <div class=\"option-text\">Continue With Apple</div>\n                                </div>\n                            </div>\n\n                            <div id=\"registration1\"> \n                                <div id=\"registration-question1\">Already registered?</div>\n                                <a id=\"registration-signup1\" href=\"\" onClick={switchToLogin}> Log in! </a>\n                            </div>\n                        </Modal.Body>\n                    </Modal>\n            </nav>\n\n            {/* Menu Icon */}\n            <div className=\"menuIcon\">\n                <span className=\"icon icon-bars\"></span>\n                <span className=\"icon icon-bars overlay\"></span>\n            </div>\n\n\n            <div className=\"overlay-menu\">\n                <ul id=\"menu\">\n                    <li><a href=\"\">Map</a></li>\n                    <li><a href=\"\">Browse</a></li>\n                    <li><a href=\"\">Sell</a></li>\n                </ul>\n            </div>\n\n            \n        </>\n    )\n}","/Users/jensenzhang/Desktop/idyll-react/client/src/components/Search.js",[],"/Users/jensenzhang/Desktop/idyll-react/client/src/components/Sell.js",["74","75","76"],"import axios from 'axios'\nimport React, { useEffect, useState, useRef} from \"react\"\nimport { Container, Row, Col, Form, Button } from 'react-bootstrap'\nimport { PinMapFill } from 'react-bootstrap-icons'\nimport TimePicker from 'react-time-picker'\nimport { useAuth } from \"../contexts/AuthContext\"\nimport firebase from 'firebase/compat/app'\nimport 'firebase/compat/auth'\nimport '../css/styles.css'\nimport '../css/sell.css'\n\nexport default function Sell(props) {\n    let today = new Date();\n    let currentTime = today.getHours() + \":\" + today.getMinutes();\n    const [cooked, setCooked] = useState(0);\n    const [value, onChange] = useState(currentTime);\n    const {zipCode, getZipCode} = useAuth();\n \n    useEffect(() => {\n        getZipCode();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    function handleCooked(e) {\n        if (e.target.checked) {\n            setCooked(true)\n        }\n        else {\n            setCooked(false)\n        }\n    }\n\n    function submitSellInfo(e) {\n        e.preventDefault();\n\n    }\n\n\n    return (\n\n        <>\n            {/* <div class=\"container-fluid scroll\">\n                <div class=\"row\">\n                    <div class=\"col-sm-12 col-md-12 col-lg-5 offset-lg6\">\n                        <div class=\"form-wrapper\">\n                            <div class=\"form\">\n                                <form id=\"item-information\" class=\"form-horizontal\" onsubmit=\"submitInformation(); return false;\">\n                                    <h1></h1>\n                                    <label class=\"control-label\" for=\"dish-name\" class=\"label-name\"> Name of Dish </label>\n                                    <input class=\"form-control\" type=\"text\" id=\"dish-name\" name=\"dish-name\" autocomplete=\"off\" required/><br></br>\n\n                                    <label for=\"dish-price\"> Price </label>\n                                    <input class=\"form-control\" type=\"number\" id=\"dish-price\" name=\"dish-price\" step=\"any\" onkeydown=\"return formatPrice(event)\" pattern=\"/^\\d+.\\d{2,2}$/\" required/><br></br>\n\n                                    <label for=\"category-selection\"> Category </label>\n                                    <select class=\"form-control\" id=\"category-selection\" name=\"category-selection\" onchange=\"showOtherInput(); return false;\" required>\n                                <option disabled selected>Select your food's category...</option>\n                                <option value=\"American\">American</option>\n                                <option value=\"Chinese\">Chinese</option>\n                                <option value=\"French\">French</option>\n                                <option value=\"Indian\">Indian</option>\n                                <option value=\"Italian\">Italian</option>\n                                <option value=\"Japanese\">Japanese</option>\n                                <option value=\"Korean\">Korean</option>\n                                <option value=\"Mexican\">Mexican</option>\n                                <option value=\"Thai\">Thai</option>\n                                <option value=\"Other\">Other...</option>\n                            </select>\n                                    <br></br>\n\n                                    <div class=\"other-input\" id=\"other-input\" required>\n                                        <label for=\"other-category\"> Please enter dish's category </label>\n                                        <input class=\"form-control\" type=\"text\" id=\"other-category\" name=\"other-category\"/><br></br>\n                                    </div>\n\n                                    <label for=\"dish-description\"> Description </label>\n                                    <textarea class=\"form-control\" type=\"text\" id=\"dish-description\" name=\"dish-description\" required></textarea>\n\n                                    <div class=\"form-check\">\n                                        <input class=\"form-check-input\" type=\"checkbox\" id=\"deliverable\" name=\"deliverable\"/>\n                                        <label class=\"form-check-label\" for=\"deliverable\"> Guest pickup? </label><br></br>\n                                    </div><br></br>\n\n                                    <label id=\"dish-photo-label\" for=\"dish-photo\"> Dish Photo </label><br></br>\n                                    <input class=\"form-control\" type=\"file\" id=\"dish-photo\" name=\"dish-photo\" method=\"post\" enctype=\"multipart/form-data\" accept=\"image/*\" onchange=\"\" multiple required/><br></br>\n\n                                    <input id=\"submit-btn\" class=\"btn btn-primary mb-3\" type=\"submit\" value=\"Submit\"/>\n                                    <input id=\"reset-btn\" class=\"btn btn-primary mb-3\" type=\"reset\" value=\"Reset\"/>\n                                </form>\n                                <div class=\"loader\" id=\"loader\"></div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div> */}\n\n            <Container fluid>\n                <Row>\n                    <Col>1 of 3</Col>\n                    <Col xs={12} sm={12} md={12} lg={5} xl={5}>\n                        <div class=\"form-wrapper\">\n                            <Form onSubmit={submitSellInfo}>\n                                <h1 id=\"sell-form-header\">Tell us a little about your dishes</h1>\n                                <h1 id=\"location-text\"><PinMapFill color=\"black\" size={22}/>Your zip code: {zipCode}</h1>\n                                \n                                <Form.Group className=\"mb-3\" controlId=\"gray\">\n                                    <Form.Label>Name</Form.Label>\n                                    <Form.Control />\n                                </Form.Group>\n\n                                <Form.Group className=\"mb-3\" controlId=\"gray\">\n                                    <Form.Label>Description</Form.Label>\n                                    <Form.Control className=\"gray\" as=\"textarea\" rows={5} />\n                                </Form.Group>\n                                <Form.Group className=\"mb-3\" controlId=\"gray\">\n                                    <Form.Label>Dietary Restrictions</Form.Label>\n                                    <Form.Control className=\"gray\" />\n                                </Form.Group>\n                                <div class=\"multiple-groups\" >\n                                    <Form.Group className=\"mb-3 half\" controlId=\"gray\">\n                                        <Form.Label>Price</Form.Label>\n                                        <Form.Control className=\"gray\" />\n                                    </Form.Group>\n                                    <Form.Group className=\"mb-3 half\" controlId=\"gray\">\n                                        <Form.Label>Type</Form.Label>\n                                        <Form.Select className=\"gray\">\n                                            <option value=\"DICTUM\">Dictamen</option>\n                                            <option value=\"CONSTANCY\">Constancia</option>\n                                            <option value=\"COMPLEMENT\">Complemento</option>\n                                    </Form.Select>\n                                    </Form.Group>\n                                </div>\n                                <div class=\"multiple-groups\">\n                                    <Form.Group className=\"mb-3 half\" controlId=\"gray\">\n                                        <Form.Label>Wait Time (minutes)</Form.Label>\n                                        <Form.Control  />\n                                    </Form.Group>\n                                    <Form.Group className=\"mb-3 half\" controlId=\"gray\">\n                                        <Form.Label >Servings</Form.Label>\n                                        <Form.Control className=\"gray\" />\n                                    </Form.Group>\n                                </div>\n                                <Form.Group className=\"mb-3\" controlId=\"gray\">\n                                    <Form.Label>Cuisine</Form.Label>\n                                    <Form.Select className=\"gray\" >\n                                        <option value=\"DICTUM\">Dictamen</option>\n                                        <option value=\"CONSTANCY\">Constancia</option>\n                                        <option value=\"COMPLEMENT\">Complemento</option>\n                                    </Form.Select>\n                                </Form.Group>\n                                <Form.Group className=\"mb-3\" controlId=\"gray\">\n                                    <Form.Label>Pictures</Form.Label>\n                                    <Form.Control className=\"file-input\" type=\"file\" multiple />\n                                </Form.Group>\n                                <Form.Group className=\"mb-3\" id=\"\">\n                                    <Form.Check onChange={handleCooked} type=\"checkbox\" label=\"Is the food already cooked?\" />\n                                </Form.Group>\n                                {cooked ? (\n                                     <div class=\"multiple-groups\">\n                                        <Form.Group className=\"mb-3 half\">\n                                            <Form.Label>Start Time</Form.Label> <br/>\n                                            <TimePicker  onChange={onChange} value={value}/>\n                                        </Form.Group>\n                                        <Form.Group className=\"mb-3 half\">\n                                            <Form.Label >End Time</Form.Label> <br/>\n                                            <TimePicker  onChange={onChange} value={value}/>\n                                        </Form.Group>\n                                    </div>\n                                ): null}\n                                <Form.Group className=\"mb-3\" id=\"\">\n                                    <Form.Check type=\"checkbox\" label=\"Are you willing to drop off the food?\" />\n                                </Form.Group>\n                                <Form.Group className=\"mb-3\" controlId=\"gray\">\n                                    <Form.Label>Additional Comments</Form.Label>\n                                    <Form.Control className=\"gray\" as=\"textarea\" rows={5} />\n                                </Form.Group>\n                                <div className=\"sell-btns\">\n                                    <Button type=\"submit\" id=\"add-btn\">\n                                        Add another dish\n                                    </Button>\n                                    <Button type=\"submit\" id=\"sell-submit-btn\">\n                                        Submit\n                                    </Button>\n                                </div>\n                            </Form>\n                        </div>\n                    </Col>\n                    <Col>3 of 3</Col>\n                </Row>\n            </Container>\n\n        </>\n    )\n}","/Users/jensenzhang/Desktop/idyll-react/client/src/contexts/AuthContext.js",["77","78","79"],"import React, { useContext, useEffect, useState } from 'react'\nimport {auth} from '../config/firebase-config'\nimport axios from 'axios'\n\nconst AuthContext = React.createContext()\n\nexport function useAuth() {\n    return useContext(AuthContext)\n}\n\nexport function AuthProvider ({ children }) {\n    const [zipCode, setZipCode] = useState('getting zip code...');\n    const [currentUser, setCurrentUser] = useState(undefined);\n    const [authState, setAuthState] = useState(false || window.localStorage.getItem(\"auth\")===true);\n    const [token, setToken] = useState('')\n    const [loading, setLoading] = useState(true)\n    const [userData, setUserData] = useState(undefined);\n\n    const getZipCode = async () => {\n        axios.get('https://ipapi.co/json/').then((res) => {\n            setZipCode(res.data.postal);\n        }).catch((err) => {\n            setZipCode('Failed to retreive zip code');\n        });\n    }\n\n    async function signup(email, password, username, firstName, lastName, phoneNumber) {\n        let res = undefined;\n        await auth\n        .createUserWithEmailAndPassword(email, password)\n        .then((userCred)=> {\n           if (userCred) {\n            setAuthState(true);\n            window.localStorage.setItem('auth', 'true')\n            userCred.user.getIdToken().then((token) => {\n                setToken(token)\n            }).catch(()=> {console.log(\"bruh\")})\n            setCurrentUser(userCred);\n            signupUser(token, email, username, firstName, lastName, phoneNumber)\n        } \n        }).catch(err => {\n            res = err;\n        })\n        return res;\n    }\n\n    async function login(email, password) {\n        let res = undefined;\n        await auth\n        .signInWithEmailAndPassword(email, password)\n        .then((userCred)=> {\n            if (userCred) {\n                setAuthState(true);\n                window.localStorage.setItem('auth', 'true')\n                setCurrentUser(userCred);\n            }\n        }).catch(err => {\n            res = err;\n        })\n        return res;\n    }\n\n    async function signout() {\n        await auth.signOut()\n    }\n\n    const fetchData = async (token) =>{\n        const res = await axios.get(\"http://localhost:5000/api/auth\", {\n            headers : {\n                Authorization: 'Bearer ' + token,\n            }\n        })\n        console.log(res.data)\n    }\n\n    const signupUser = async (token, email, username, firstName, lastName, phoneNumber) =>{\n        //https://us-central1-idyll-29e66.cloudfunctions.net/server/api/signup\n        //http://localhost:5000/api/signup\n        const res = await axios.post(\"https://us-central1-idyll-29e66.cloudfunctions.net/server/api/signup\", \n        { \n            email: email,\n            username: username,\n            firstName: firstName,\n            lastName: lastName,\n            phoneNumber: phoneNumber\n        }, \n        {\n            headers : {\n                Authorization: 'Bearer ' + token,\n            }\n        })\n        console.log(res.data)\n    }\n\n    const getUserData = async(token) =>{\n        const res = await axios.get(\"https://us-central1-idyll-29e66.cloudfunctions.net/server/api/getData\",\n        {\n            headers : {\n                Authorization: 'Bearer ' + token,\n            }\n        })\n        return JSON.parse(JSON.stringify(res.data));\n    }\n\n    const value = {currentUser, signup, login, signout, userData, zipCode, getZipCode}\n\n    useEffect(() => {\n        const unsubscribe = auth.onAuthStateChanged(async userCred =>  {\n            if (userCred) {\n                setAuthState(true)\n                window.localStorage.setItem('auth', 'true')\n                let token = await userCred.getIdToken();\n                setToken(token);\n                setCurrentUser(userCred);\n                let data = await getUserData(token)\n                setUserData(data);\n                setLoading(false);\n            }\n        })\n        return unsubscribe;\n    }, \n    [currentUser])\n\n    // useEffect(async() => {\n    //     if (token) {\n    //         const data = await getUserData(token);\n    //         console.log(data);\n    //     }\n    // },[token])\n\n    return (\n        <AuthContext.Provider value = {value}>\n            {children}\n        </AuthContext.Provider>   \n    ) \n}","/Users/jensenzhang/Desktop/idyll-react/client/src/components/Browse.js",["80","81"],"import React, { useEffect, useState, useRef} from \"react\"\nimport '../css/index.css'\nimport '../css/browse.css'\nimport { Dropdown } from \"react-bootstrap\"\nimport {Search} from 'react-bootstrap-icons'\n\nexport default function Browse(props) {\n    const searchRef = useRef();\n\n    return (\n        <>\n            <div className=\"search-container\">\n                <div className=\"search-bar\">\n                    <Search id=\"search-icon\" color=\"gray\" size={24} />\n                    <input ref = {searchRef} id=\"search-input\" placeholder=\"Search...\"/>\n                </div>\n            </div>\n            <div id=\"green-line\"></div>\n\n            <div className=\"filter-container\">\n                <button type=\"button\" class=\"green-btn\" id=\"filter-btn\"> Filter </button>\n                <div class=\"line-separator\"></div>\n                <h1 id=\"cuisine-header\">Cuisine</h1>\n                <div className=\"cuisine-form\">\n\n                    <div className=\"cuisine-boxes\">\n                        <input class=\"form-check-input cuisine-input\" type=\"checkbox\" value=\"\"/>\n                        <label className=\"form-check-label cuisine-labels cuisine-input\"> American </label> <br></br>\n\n                        <input class=\"form-check-input cuisine-input\" type=\"checkbox\" value=\"\"/>\n                        <label className=\"form-check-label cuisine-labels cuisine-input\"> Chinese </label> <br></br>\n\n                        <input class=\"form-check-input cuisine-input\" type=\"checkbox\" value=\"\"/>\n                        <label className=\"form-check-label cuisine-labels cuisine-input\"> French </label> <br></br>\n\n                        <input class=\"form-check-input cuisine-input\" type=\"checkbox\" value=\"\"/>\n                        <label className=\"form-check-label cuisine-labels cuisine-input\"> Indian </label> <br></br>\n\n                        <input class=\"form-check-input cuisine-input\" type=\"checkbox\" value=\"\"/>\n                        <label className=\"form-check-label cuisine-labels cuisine-input\"> Italian </label> <br></br>\n\n                        <input class=\"form-check-input cuisine-input\" type=\"checkbox\" value=\"\"/>\n                        <label className=\"form-check-label cuisine-labels cuisine-input\"> Japanese </label> <br></br>\n\n                        <input class=\"form-check-input cuisine-input\" type=\"checkbox\" value=\"\"/>\n                        <label className=\"form-check-label cuisine-labels cuisine-input\"> Korean </label> <br></br>\n                        \n                        <input class=\"form-check-input cuisine-input\" type=\"checkbox\" value=\"\"/>\n                        <label className=\"form-check-label cuisine-labels cuisine-input\"> Mexican </label> <br></br>\n                        \n                        <input class=\"form-check-input cuisine-input\" type=\"checkbox\" value=\"\"/>\n                        <label className=\"form-check-label cuisine-labels cuisine-input\"> Thai </label> <br></br>\n\n                        <input class=\"form-check-input cuisine-input\" type=\"checkbox\" value=\"\"/>\n                        <label className=\"form-check-label cuisine-labels cuisine-input\"> Other... </label> <br></br>\n                    </div>\n                    \n                </div>\n                <div class=\"line-separator\"></div>\n\n                <h1 id=\"type-header\">Type</h1>\n                <div className=\"type-form\">\n                    <div className=\"type-boxes\">\n                        <input class=\"form-check-input type-input\" type=\"checkbox\" value=\"\"/>\n                        <label className=\"form-check-label type-labels type-input\"> Breakfast </label> <br></br>\n\n                        <input class=\"form-check-input type-input\" type=\"checkbox\" value=\"\"/>\n                        <label className=\"form-check-label type-labels type-input\"> Lunch </label> <br></br>\n\n                        <input class=\"form-check-input type-input\" type=\"checkbox\" value=\"\"/>\n                        <label className=\"form-check-label type-labels type-input\"> Dinner </label> <br></br>\n                    </div>\n                    \n                </div>\n\n                <div class=\"line-separator\"></div>\n\n                <h1 id=\"location-header\">Location</h1>\n                <div className=\"location-form\">\n                <Dropdown>\n                    <Dropdown.Toggle variant=\"light\" id=\"location-dropdown\">\n                        Cities nearby\n                    </Dropdown.Toggle>\n\n                    <Dropdown.Menu>\n                        <Dropdown.Item>Johns Creek</Dropdown.Item>\n                        <Dropdown.Item>Duluth</Dropdown.Item>\n                        <Dropdown.Item>Atlanta</Dropdown.Item>\n                    </Dropdown.Menu>\n                </Dropdown>\n                </div>\n            </div>\n\n            <div id=\"dropdown-container\">\n            <Dropdown>\n                    <Dropdown.Toggle variant=\"light\" id=\"dropdown\">\n                        Cities nearby\n                    </Dropdown.Toggle>\n\n                    <Dropdown.Menu>\n                        <Dropdown.Item>Johns Creek</Dropdown.Item>\n                        <Dropdown.Item>Duluth</Dropdown.Item>\n                        <Dropdown.Item>Atlanta</Dropdown.Item>\n                    </Dropdown.Menu>\n                </Dropdown>\n            </div>\n\n        </>\n    )\n}",{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":1,"column":17,"nodeType":"88","messageId":"89","endLine":1,"endColumn":26},{"ruleId":"86","severity":1,"message":"90","line":1,"column":28,"nodeType":"88","messageId":"89","endLine":1,"endColumn":36},{"ruleId":"86","severity":1,"message":"91","line":2,"column":8,"nodeType":"88","messageId":"89","endLine":2,"endColumn":13},{"ruleId":"86","severity":1,"message":"92","line":4,"column":8,"nodeType":"88","messageId":"89","endLine":4,"endColumn":16},{"ruleId":"86","severity":1,"message":"93","line":7,"column":8,"nodeType":"88","messageId":"89","endLine":7,"endColumn":14},{"ruleId":"86","severity":1,"message":"87","line":1,"column":17,"nodeType":"88","messageId":"89","endLine":1,"endColumn":26},{"ruleId":"86","severity":1,"message":"94","line":9,"column":16,"nodeType":"88","messageId":"89","endLine":9,"endColumn":22},{"ruleId":"95","severity":1,"message":"96","line":121,"column":55,"nodeType":"97","endLine":121,"endColumn":96},{"ruleId":"98","severity":1,"message":"99","line":125,"column":25,"nodeType":"97","endLine":125,"endColumn":36},{"ruleId":"100","severity":1,"message":"101","line":171,"column":109,"nodeType":"102","messageId":"103","endLine":171,"endColumn":131},{"ruleId":"100","severity":1,"message":"101","line":172,"column":175,"nodeType":"102","messageId":"103","endLine":172,"endColumn":189},{"ruleId":"100","severity":1,"message":"101","line":175,"column":191,"nodeType":"102","messageId":"103","endLine":175,"endColumn":208},{"ruleId":"98","severity":1,"message":"99","line":180,"column":33,"nodeType":"97","endLine":180,"endColumn":75},{"ruleId":"98","severity":1,"message":"99","line":191,"column":33,"nodeType":"97","endLine":191,"endColumn":56},{"ruleId":"95","severity":1,"message":"96","line":191,"column":56,"nodeType":"97","endLine":191,"endColumn":103},{"ruleId":"98","severity":1,"message":"99","line":192,"column":33,"nodeType":"97","endLine":192,"endColumn":55},{"ruleId":"95","severity":1,"message":"96","line":192,"column":55,"nodeType":"97","endLine":192,"endColumn":102},{"ruleId":"98","severity":1,"message":"99","line":196,"column":33,"nodeType":"97","endLine":196,"endColumn":100},{"ruleId":"100","severity":1,"message":"101","line":210,"column":86,"nodeType":"102","messageId":"103","endLine":210,"endColumn":108},{"ruleId":"100","severity":1,"message":"101","line":213,"column":85,"nodeType":"102","messageId":"103","endLine":213,"endColumn":107},{"ruleId":"100","severity":1,"message":"101","line":216,"column":82,"nodeType":"102","messageId":"103","endLine":216,"endColumn":104},{"ruleId":"100","severity":1,"message":"101","line":219,"column":95,"nodeType":"102","messageId":"103","endLine":219,"endColumn":117},{"ruleId":"100","severity":1,"message":"101","line":222,"column":85,"nodeType":"102","messageId":"103","endLine":222,"endColumn":107},{"ruleId":"100","severity":1,"message":"101","line":225,"column":85,"nodeType":"102","messageId":"103","endLine":225,"endColumn":107},{"ruleId":"100","severity":1,"message":"101","line":228,"column":98,"nodeType":"102","messageId":"103","endLine":228,"endColumn":120},{"ruleId":"100","severity":1,"message":"101","line":231,"column":88,"nodeType":"102","messageId":"103","endLine":231,"endColumn":110},{"ruleId":"95","severity":1,"message":"96","line":250,"column":78,"nodeType":"97","endLine":250,"endColumn":133},{"ruleId":"95","severity":1,"message":"96","line":254,"column":77,"nodeType":"97","endLine":254,"endColumn":131},{"ruleId":"98","severity":1,"message":"99","line":261,"column":33,"nodeType":"97","endLine":261,"endColumn":94},{"ruleId":"98","severity":1,"message":"99","line":276,"column":25,"nodeType":"97","endLine":276,"endColumn":36},{"ruleId":"98","severity":1,"message":"99","line":277,"column":25,"nodeType":"97","endLine":277,"endColumn":36},{"ruleId":"98","severity":1,"message":"99","line":278,"column":25,"nodeType":"97","endLine":278,"endColumn":36},{"ruleId":"86","severity":1,"message":"91","line":1,"column":8,"nodeType":"88","messageId":"89","endLine":1,"endColumn":13},{"ruleId":"86","severity":1,"message":"104","line":2,"column":38,"nodeType":"88","messageId":"89","endLine":2,"endColumn":44},{"ruleId":"86","severity":1,"message":"92","line":7,"column":8,"nodeType":"88","messageId":"89","endLine":7,"endColumn":16},{"ruleId":"86","severity":1,"message":"105","line":14,"column":12,"nodeType":"88","messageId":"89","endLine":14,"endColumn":21},{"ruleId":"86","severity":1,"message":"106","line":16,"column":12,"nodeType":"88","messageId":"89","endLine":16,"endColumn":19},{"ruleId":"86","severity":1,"message":"107","line":67,"column":11,"nodeType":"88","messageId":"89","endLine":67,"endColumn":20},{"ruleId":"86","severity":1,"message":"87","line":1,"column":17,"nodeType":"88","messageId":"89","endLine":1,"endColumn":26},{"ruleId":"86","severity":1,"message":"90","line":1,"column":28,"nodeType":"88","messageId":"89","endLine":1,"endColumn":36},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'axios' is defined but never used.","'firebase' is defined but never used.","'Search' is defined but never used.","'Button' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'useRef' is defined but never used.","'authState' is assigned a value but never used.","'loading' is assigned a value but never used.","'fetchData' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]